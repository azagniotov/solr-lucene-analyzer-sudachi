/*
 * Copyright (c) 2023-2024 Alexander Zagniotov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations.all {
    resolutionStrategy {
        force "junit:junit:${junitVersion}"
        force "commons-io:commons-io:2.8.0"
        force "org.apache.lucene:lucene-queryparser:${luceneVersion}"
        force "org.apache.lucene:lucene-codecs:${luceneVersion}"
        force "org.apache.lucene:lucene-test-framework:${luceneVersion}"
        force "org.apache.solr:solr-test-framework:${solrVersion}"
    }
}

testing {
    suites {
        test {
            useTestNG()
            dependencies {
                implementation "com.google.truth:truth:1.1.5"
                // From v7.6.0 (inc.) Java 8 support is dropped
                implementation "org.testng:testng:7.5.1"
            }
        }

        integrationTest(JvmTestSuite) {
            sources {
                resources {
                    srcDirs += [
                            "src/main/resources"
                    ]
                }
            }
            useJUnit()
            dependencies {
                implementation project()
                implementation "junit:junit"
                implementation "org.apache.lucene:lucene-test-framework"
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        functionalTest(JvmTestSuite) {

            sources {
                resources {
                    srcDirs += [
                            "src/main/resources"
                    ]
                }
            }
            useJUnit()
            dependencies {
                implementation project()
                implementation "junit:junit"
                implementation "commons-io:commons-io"
                implementation "org.apache.lucene:lucene-codecs"
                implementation "org.apache.lucene:lucene-queryparser"
                implementation "org.apache.lucene:lucene-test-framework"
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        endToEndTest(JvmTestSuite) {

            sources {
                resources {
                    srcDirs += [
                            "src/main/resources"
                    ]
                }
            }
            useJUnit()
            dependencies {
                implementation project()
                implementation "junit:junit"
                implementation "commons-io:commons-io"
                implementation "org.apache.solr:solr-test-framework"
            }

            targets {
                all {
                    testTask.configure {
                        systemProperty "test.solr.allowed.securerandom", "NativePRNG"
                        systemProperty "solr.log.dir", "/var/solr/logs"
                        systemProperty "solr.install.dir", "."
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

processIntegrationTestResources.dependsOn(processResources)

tasks.withType(Test).configureEach {


    reports.html.required = false
    reports.junitXml.required = false
    ignoreFailures = false
    testLogging {
        showStandardStreams true
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}
